{"ast":null,"code":"var _jsxFileName = \"/Users/yousafishaq/Desktop/React-Challenge/Client/src/Components/Users.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport AlbumCard from './AlbumCard';\nimport { useQuery, gql, NetworkStatus } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALL_USERS = gql`\n  query {\n    getAllUsers {\n      id\n      firstName\n      lastName\n      email\n      password\n    }\n  }\n`;\n\nfunction Albums() {\n  _s();\n\n  //Passing query to useQuery hook to fetch data\n  const {\n    data,\n    loading,\n    error,\n    networkStatus\n  } = useQuery(ALL_USERS, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  if (networkStatus === NetworkStatus['refetch']) return 'Refetching!';else if (loading) return 'Loading..';else if (error) return `Error! ${error}`;else if (data) console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"is-scrollable-list\",\n    children: data ? data.getAllUsers.map(item => /*#__PURE__*/_jsxDEV(AlbumCard, {\n      item: item\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }, this)) : 'Albums list undefined...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Albums, \"KBE8BsYV7XpLbA1wgkbVR5k03s0=\", false, function () {\n  return [useQuery];\n});\n\n_c = Albums;\nexport default Albums;\n\nvar _c;\n\n$RefreshReg$(_c, \"Albums\");","map":{"version":3,"sources":["/Users/yousafishaq/Desktop/React-Challenge/Client/src/Components/Users.js"],"names":["React","AlbumCard","useQuery","gql","NetworkStatus","ALL_USERS","Albums","data","loading","error","networkStatus","fetchPolicy","console","log","getAllUsers","map","item","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,aAAxB,QAA6C,gBAA7C;;AAEA,MAAMC,SAAS,GAAGF,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,SAASG,MAAT,GAAiB;AAAA;;AAGb;AACA,QAAK;AAACC,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAwCR,QAAQ,CAACG,SAAD,EAAY;AAACM,IAAAA,WAAW,EAAE;AAAd,GAAZ,CAArD;AAGA,MAAID,aAAa,KAAKN,aAAa,CAAC,SAAD,CAAnC,EACI,OAAO,aAAP,CADJ,KAEK,IAAII,OAAJ,EACD,OAAO,WAAP,CADC,KAEA,IAAIC,KAAJ,EACD,OAAQ,UAASA,KAAM,EAAvB,CADC,KAEA,IAAGF,IAAH,EACDK,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,cACKA,IAAI,GAAGA,IAAI,CAACO,WAAL,CAAiBC,GAAjB,CAAsBC,IAAD,iBACzB,QAAC,SAAD;AAEI,MAAA,IAAI,EAAEA;AAFV,OACSA,IAAI,CAACC,EADd;AAAA;AAAA;AAAA;AAAA,YADI,CAAH,GAKA;AANT;AAAA;AAAA;AAAA;AAAA,UADJ;AAUP;;GAzBQX,M;UAIwCJ,Q;;;KAJxCI,M;AA2BT,eAAeA,MAAf","sourcesContent":["import React from 'react';\nimport AlbumCard from './AlbumCard'\nimport { useQuery, gql, NetworkStatus } from '@apollo/client';\n\nconst ALL_USERS = gql`\n  query {\n    getAllUsers {\n      id\n      firstName\n      lastName\n      email\n      password\n    }\n  }\n`;\n\nfunction Albums(){\n\n\n    //Passing query to useQuery hook to fetch data\n    const{data, loading, error, networkStatus} = useQuery(ALL_USERS, {fetchPolicy: \"cache-and-network\"})\n\n\n    if (networkStatus === NetworkStatus['refetch'])\n        return 'Refetching!';\n    else if (loading)\n        return 'Loading..';\n    else if (error)\n        return `Error! ${error}`;\n    else if(data)\n        console.log(data)\n        return(\n            <div className=\"is-scrollable-list\">\n                {data ? data.getAllUsers.map((item) => (\n                    <AlbumCard\n                        key={item.id}\n                        item={item}\n                    />\n                )) : 'Albums list undefined...' }\n            </div>\n        )\n}\n\nexport default Albums;"]},"metadata":{},"sourceType":"module"}